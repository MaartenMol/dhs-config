---
- name: Prepare CentOS Hosts
  hosts: centos
  gather_facts: no
  tasks:
    - name: Install required DNF packages
      dnf:
        name:
          - nano
          - python3
          - python3-pip
          - epel-release
          - git
          - nfs-utils
        state: latest
    - name: Making sure Python 3 is the main Python interpreter
      shell: alternatives --set python /usr/bin/python3
    - name: Disable FirewallD Service
      systemd:
        name: firewalld
        enabled: no
        state: stopped
    - name: Create the SSH directory if it does not exist
      file:
        path: /root/.ssh
        state: directory
    - name: Install MMOL Public Key
      get_url:
        url: https://gist.githubusercontent.com/MaartenMol/326668e09d73e4bd43c8e0b0dd22083b/raw/c07f870e79502efa9bd1e4f568d669cfccd32324/PublicKey
        dest: /root/.ssh/authorized_keys
        force: yes
        owner: 'root'
        mode: '0600'
    - name: Download node_exporter
      get_url:
        url: https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz
        force: no
        dest: /opt/node_exporter-0.18.1.linux-amd64.tar.gz
        mode: '0755'
    - name: Untar node_exporter
      shell: tar -xzvf /opt/node_exporter-0.18.1.linux-amd64.tar.gz -C /opt
    - name: Move node_exporter
      shell: mv /opt/node_exporter-0.18.1.linux-amd64/node_exporter /usr/local/bin/node_exporter
    - name: Set run permissions node_exporter
      shell: chmod 755 /usr/local/bin/node_exporter
    - name: Download SystemD service for node_exporter
      get_url:
        url: https://raw.githubusercontent.com/MaartenMol/dhs-config/master/infrastructure/Config/node_exporter.service
        force: yes
        dest: /etc/systemd/system/node_exporter.service
        mode: '0644'
    - name: Start & Enable node_exporter
      systemd:
        name: node_exporter
        daemon_reload: yes
        enabled: yes
        state: started

- name: Prepare HOPHOP
  hosts: management
  gather_facts: no
  tasks:
    - name: Create the NFS directory if it does not exist
      file:
        path: /nfs
        state: directory
    - name: Mount NFS share
      mount:
        path: /nfs
        src: 172.27.72.20:/mnt/POOL-01/DOCKERVOLS
        fstype: nfs
        state: mounted

- name: Prepare LoadBalancers
  hosts: loadbalancers
  gather_facts: no
  tasks:
    - name: Install required DNF packages
      dnf:
        name:
          - gcc 
          - kernel-headers 
          - kernel-devel
          - haproxy 
          - keepalived
        state: latest
    - name: Download HAproxy Config
      get_url:
        url: https://raw.githubusercontent.com/MaartenMol/dhs-config/master/infrastructure/Config/haproxy.cfg
        force: yes
        dest: /etc/haproxy/haproxy.cfg
        mode: '0644'
    - name: Download KeepAliveD Slave Config
      get_url:
        url: https://raw.githubusercontent.com/MaartenMol/dhs-config/master/infrastructure/Config/keepalived-slave.conf
        force: yes
        dest: /etc/keepalived/keepalived.conf
        mode: '0644'

- name: Prepare LoadBalancers MASTER
  hosts: loadbalancers_master
  gather_facts: no
  tasks:
    - name: Download KeepAliveD Master Config
      get_url:
        url: https://raw.githubusercontent.com/MaartenMol/dhs-config/master/infrastructure/Config/keepalived-master.conf
        force: yes
        dest: /etc/keepalived/keepalived.conf
        mode: '0644'

- name: Enable LoadBalancers
  hosts: loadbalancers
  gather_facts: no
  tasks:
    - name: Start & Enable KeepAliveD
      systemd:
        name: keepalived
        enabled: yes
        state: started
    - name: Start & Enable HAproxy
      systemd:
        name: haproxy
        enabled: yes
        state: started  

- name: Prepare Docker Hosts
  hosts: dockers
  gather_facts: no
  tasks:
    - name: Install required DNF packages
      dnf:
        name:
          - gcc 
          - gcc-c++ 
          - nodejs 
          - gettext 
          - device-mapper-persistent-data 
          - lvm2 
          - bzip2
        state: latest
    - name: Add Docker CE REPO
      shell: dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo && dnf list docker-ce
    - name: Install Docker CE
      shell: dnf install docker-ce --nobest -y
    - name: Enable Docker CE Service
      systemd:
        name: docker
        enabled: yes
        state: started
    - name: Install Docker-Compose
      get_url:
        url: https://github.com/docker/compose/releases/download/1.25.4/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0755'
    - name: Install PIP Packages
      pip:
        state: latest
        name:
          - docker 
          - docker-compose
          - jsondiff

- name: Prepare Ansible AWX Host
  hosts: ansible-awx
  gather_facts: no
  tasks:
    - name: Install required DNF packages
      dnf:
        name:
          - ansible
        state: latest
    - name: Install Ansible Tower CLI
      pip:
        state: latest
        name:
          - ansible-tower-cli
    - name: GIT Clone Ansible AWX
      git:
        repo: 'https://github.com/ansible/awx.git'
        dest: /root/awx
    - name: Download inventory file for Ansible AWX
      get_url:
        url: https://raw.githubusercontent.com/MaartenMol/dhs-config/master/ansible-awx/inventory?token=AC4QWR7K7TI6QEB5J5QLRLC6MD64Q
        force: yes
        dest: /root/inventory
        mode: '0755'
    - name: Run Portainer Agent in Docker
      docker_container:
        name: portainer_agent
        image: portainer/agent
        state: started
        restart_policy: always
        ports:
          - "9001:9001"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
    - name: Run cAdvisor in Docker
      docker_container:
        name: cadvisor
        image: google/cadvisor
        state: started
        restart_policy: always
        ports:
          - "8080:8080"
        volumes:
          - /:/rootfs:ro
          - /var/run:/var/run:ro
          - /sys:/sys:ro
          - /var/lib/docker/:/var/lib/docker:ro
          - /dev/disk/:/dev/disk:ro
    - name: Run the Ansible AWX runbook
      shell: ansible-playbook -i /root/inventory /root/awx/installer/install.yml
    - name: Set Header Logo AWX
      shell: docker exec awx_web bash -l -c "curl https://img.maartenmol.nl/test.svg > /var/lib/awx/public/static/assets/logo-header.svg"
    - name: Set Favicon AWX
      shell: docker exec awx_web bash -l -c "curl https://raw.githubusercontent.com/MaartenMol/dhs-awx/master/awx/ui/client/assets/favicon.ico > /var/lib/awx/public/static/assets/favicon.ico"

- name: Setup Swarm Cluster
  hosts: docker_swarm_manager
  gather_facts: no
  tasks:
    - name: Init a new swarm with default parameters
      docker_swarm:
        state: present
    - name: Ansible register Swarm Join Token for Worker
      shell: "docker swarm join-token worker -q"
      register: join_swarm_worker

- name: Add workers to Swarm cluster
  hosts: docker_swarm_worker
  tasks:
    - name: Add nodes to new swarm
      docker_swarm:
        state: join
        advertise_addr: ""
        join_token: "{{ hostvars['docker-01']['join_swarm_worker']['stdout'] }}"
        remote_addrs: [ '172.27.72.61:2377' ]

- name: Deploy Swarm Stacks
  hosts: docker_swarm_manager
  gather_facts: no
  tasks:
    - name: GIT Clone DHS Config
      git:
        repo: 'https://github.com/MaartenMol/dhs-config.git'
        dest: /root/dhs-config
    - name: Deploy Portainer
      docker_stack:
        state: present
        name: portainer
        compose:
          - /root/dhs-config/infrastructure/3. Docker/portainer.yml
    - name: Deploy Monitoring
      docker_stack:
        state: present
        name: monitoring
        compose:
          - /root/dhs-config/infrastructure/3. Docker/monitoring.yml
    - name: Deploy Logging
      docker_stack:
        state: present
        name: logging
        compose:
          - /root/dhs-config/infrastructure/3. Docker/logging.yml
    - name: Deploy GitLab
      docker_stack:
        state: present
        name: gitlab
        compose:
          - /root/dhs-config/infrastructure/3. Docker/gitlab.yml
    - name: Deploy Nexus3
      docker_stack:
        state: present
        name: nexus
        compose:
          - /root/dhs-config/infrastructure/3. Docker/nexus.yml